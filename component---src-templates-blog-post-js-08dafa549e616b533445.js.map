{"version":3,"file":"component---src-templates-blog-post-js-08dafa549e616b533445.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, TaehyunJeon all rights reserved.\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Bio","_data$site$siteMetada","_data$site$siteMetada2","data","useStaticQuery","author","site","siteMetadata","social","React","className","name","summary","_ref","location","title","children","isRootPath","pathname","header","Link","to","Date","getFullYear","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","metaDescription","defaultTitle","content","property","twitter","Head","_ref2","markdownRemark","post","Seo","frontmatter","excerpt","previous","next","siteTitle","Layout","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}